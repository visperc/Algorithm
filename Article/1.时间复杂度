1.时间复杂度
	衡量算法优劣有两个重要的标准，时间复杂度和空间复杂度。

	时间复杂度： T(n) = O(f(n))
	这里的O 是一个数学符号，他的定义是 “如果T(n) 和f(n)是定义在正整数集合上的两个函数，则T(n)=O(f(n))表示存在正的常数C和n0 ,使得当n≥n0时都满足0≤T(n)≤Cf(n)”，对于这句话的简单理解就是当n->+∞的时候，T(n)
	和f(n)的比值是不是一个为一个整数c。

	例如 
	1.a(n) = n^3 + n^2  b(n) = 2n^3 + 1 
	两个函数的最高次项都是 n^3 所以当n->正无穷的时候，a(n) / b(n) = 1/2 
	则 a(n) = O(b(n))

	1.a(n) = n^1.5  b(n) = nlgn 

	由于a(n) = n * n^0.5 ,b(n) = n * lgn 所以也就是比较 n^0.5 和lgn 在n趋向正无穷的时候，两者的变化率
	我们知道，函数在某点的变化率快慢也就是函数在该点的导数。由此 a(n) 的导函数为0.5 * 1/n^0.5 ,而lgn的导函数
	是 1/n*ln10.所以 a(n) > O(b(n))

	我们在各种教科书上所看到的
	c < log2N < n < n * Log2N < n^2 < n^3 < 2^n < 3^n < n!
	其实也就是求极限的问题。有兴趣的可以自行去证明。



